" vim: ft=vim
"git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
set rtp+=~/.vim/bundle/vundle/
let $GIT_SSL_NO_VERIFY = 'true'
call vundle#rc()

Bundle 'The-NERD-tree'
nmap <F3>   :NERDTreeToggle<CR>
let g:NERDTreeWinPos="right"

Bundle 'The-NERD-Commenter'
let g:NERDShutUp=1
nmap <F9> <leader>c<SPACE>
vmap <F9> <leader>c<SPACE>

Bundle 'neocomplcache'
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

Bundle 'rails.vim'

Bundle 'Tagbar'
nmap <F2>   :TagbarToggle<CR>

Bundle 'molokai'
"Bundle 'Solarized'
"Bundle 'railscasts'
"Bundle 'Solarized'
"if has 256 colour, use a 256 colour theme
if $TERM =~ '^\(xterm\|screen\)' || $TERM =~ '256color$' || has("gui_running")
    if !has("gui_running")
        set t_Co=256
    endif
    "colorscheme inkpot
    "colorscheme leo
    colorscheme molokai
else
    colorscheme tango
endif

" vundle
Bundle 'gmarik/vundle'

Bundle 'Align'
Bundle 'simplefold'
Bundle 'delimitMate.vim'
Bundle 'openssl.vim'

Bundle 'rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
"call :RainbowParenthesesToggle()
nmap <leader>r  :RainbowParenthesesToggle<cr>

" syntax
Bundle 'fluxbox.vim'
Bundle 'Markdown'
Bundle 'bbcode'
