#!/usr/bin/env ruby
# coding: utf-8

require 'open-uri'
require 'nokogiri'
require 'parallel'

MATCHERS = {
  :imgevenue => lambda { |doc| doc.at_css("img#thepic").attr('src') },
  :imgchili  => lambda { |doc| doc.at_css("img#show_image").attr('src') },
}

def fetch_image(url, dir = '.')
  host = URI.parse(url).host
  base_url = "http://" + host
  matcher = MATCHERS.to_a.select{|k,_| host =~ /#{k}/i }.first.last
  io = open(url)
  type = io.content_type
  if type == 'text/html'
    page = io.read
    doc = Nokogiri.parse(page)
    img_url = matcher.call(doc)
    url = URI.join(base_url, img_url)
    io = open(url)
  end
  file_name = File.join(dir, url.to_s.split('/').last )
  file = io.read
  open(file_name, 'wb') {|f| f.puts file }
end

def get_all_images(url, dir)
  page = open(url).read
  doc = Nokogiri.parse(page)
  img_urls = doc.xpath("//@href").map(&:value).grep(/venue|chili/)
  Dir.mkdir(dir)  unless File.directory?(dir)
  Parallel.map(img_urls, :in_threads => 3) do |img_url|
    puts "Getting \e[32m#{img_url}\e[m"
    fetch_image(img_url, dir) rescue puts "Error retrieving \e[31;1m#{img_url}\e[m"
  end
end

if __FILE__==$0
  dir, target = ARGV
  abort "usage: #{$0} dir url"  unless dir and target
  target = "http://girlsreleased.com/?setid=#{target}" if target =~ /\d+/  # girlsreleased.com sets
  get_all_images(target, dir)
end
