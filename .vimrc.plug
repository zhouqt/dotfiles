" vim: ft=vim foldmethod=marker
"

let g:plug_url_format = 'git://github.com/%s.git'

call plug#begin("~/.vim/plugged")
"===================Plug loading starts========================================

"-------------------------------------------------------------------------------
"                                 readability                                  "
"-------------------------------------------------------------------------------

Plug 'scrooloose/nerdtree' "{{{
nmap <F4>   :NERDTreeToggle<CR>
Plug 'Xuyuanp/nerdtree-git-plugin'

autocmd StdinReadPre * let s:std_in=1
" auto start nerd tree when no file is open, conflicts with startify
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" }}}

Plug 'rainbow_parentheses.vim' "{{{
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
"call :RainbowParenthesesToggle()
nmap <leader>r  :RainbowParenthesesToggle<cr>
au VimEnter * RainbowParenthesesToggle
"au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}

Plug 'bling/vim-airline' "{{{
" let g:airline#extensions#tabline#enabled=1
let g:airline_theme='dark'
" powerline fonts does not work well with Chinese fonts which I would put higher
" priority
let g:airline_powerline_fonts=1
" }}}

Plug 'tomasr/molokai'

"-------------------------------------------------------------------------------
"                                 operability                                  "
"-------------------------------------------------------------------------------

" comment / uncomment
Plug 'tomtom/tcomment_vim' " {{{
vmap <F9> :TComment<CR>
nmap <F9> :TComment<CR>
"Auomatically add file head. NERO_commenter.vim needed.
function! AutoHead()
    let fl = line(".")
    if getline(fl) !~ "^$"
        let fl += 1
    endif
    let ll = fl+2
    "call append(fl,"Last Change: ")
    call append(fl,"Description: ")
    call append(fl+1,"")
    execute fl . ','. ll .'TComment'
endfunc
nmap ,h :call AutoHead()<cr>

autocmd BufNewFile *.sh 0put=\"#!/bin/bash\<nl># vim:fdm=marker\<nl>\" |call AutoHead()
autocmd BufNewFile *.py
            \0put=\"#!/usr/bin/env python\<nl># -*- coding: UTF-8 -*-\<nl>\"
            \|call AutoHead()
autocmd BufNewFile *.rb 0put=\"#!/usr/bin/env ruby\<nl># encoding: utf-8\<nl>\" |call AutoHead()
autocmd BufNewFile *.gpi 0put='#!/usr/bin/gnuplot -persist' |call AutoHead()
" }}}

" make stuff organized
Plug 'junegunn/vim-easy-align' "{{{
vmap <Enter> <Plug>(EasyAlign)
nmap ga      <Plug>(EasyAlign)
" }}}

" syntax checking
Plug 'Syntastic'

" parentheses
Plug 'tpope/vim-surround'

" start screen
Plug 'mhinz/vim-startify'
let g:startify_bookmarks=[ '~/.vimrc', '~/.vimrc.plug' ]
let g:startify_custom_header =
      \ map(split(system('fortune -s|cowsay -f small -W 90'), '\n'), '"   ". v:val') + ['']
let g:startify_list_order = [
      \ ['   最近打开:' ], 'dir', 'files',
      \ ['   已保存情景:'], 'sessions',
      \ ['   书签:'], 'bookmarks',
      \ ]

" automatic tag generation with easytags
Plug 'xolox/vim-easytags' " {{{
Plug 'vim-misc'
let g:easytags_dynamic_files = 2
let g:easytags_events = ['BufWritePost']
" }}}

" syntax definitions {{{
" autocmd BufNewFile,BufRead /tmp/*forum.ubuntu.org.cn* set ft=bbcode
" Plug 'bbcode', { 'for' : 'bbcode' }

" autocmd BufNewFile,BufRead *.coffee set ft=coffee
Plug 'vim-coffee-script', {'for': 'coffee'}

Plug 'ledger/vim-ledger', { 'for' : 'ledger' }
autocmd FileType ledger nnoremap j jzz
autocmd FileType ledger nnoremap k kzz
autocmd FileType ledger nnoremap G Gzz

Plug 'slim-template/vim-slim', {'for': 'slim'}

autocmd BufNewFile,BufRead *.markdown,*mkd setfiletype octopress
Plug 'tangledhelix/vim-octopress', {'for' : 'octopress'}

Plug 'elixir-lang/vim-elixir', { 'for' : 'elixir' }
autocmd FileType elixir setlocal nofoldenable

Plug 'gorodinskiy/vim-coloresque', {'for': ['css', 'sass', 'scss']}

Plug 'openssl.vim'

" }}}

Plug 'Shougo/neocomplete.vim' "{{{
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.ledger = '^\s\+\(\S \S\|\S\|:\)\+'
let g:neocomplete#enable_at_startup=1
let g:neocomplete#data_directory='~/.vim/.cache/neocomplete'
let g:neocomplete#enable_auto_delimiter=1
Plug 'SirVer/ultisnips', {'do': 'mkdir -p ~/.vim/ftdetect; ln -sf ~/.vim/plugged/ultisnips/ftdetect/* ~/.vim/ftdetect/'}
Plug 'honza/vim-snippets'
Plug 'Konfekt/FastFold'         " fix for vim's slow fdm=syntax
" add personal snippet directory to search path, note that snippets is reserved and could not be used
let g:UltiSnipsSnippetDirectories=["snips", "UltiSnips"]
" }}}

Plug 'Shougo/unite.vim' " {{{
Plug 'Shougo/vimproc', {'do': 'make'}
Plug 'Shougo/unite-outline'
Plug 'Shougo/neomru.vim'
let g:unite_source_history_yank_enable = 1
let g:unite_source_grep_command        = 'ag'
let g:unite_source_grep_default_opts   = '--nocolor --nogroup'
let g:unite_source_grep_recursive_opt  = ''
let g:unite_source_grep_max_candidates = 200
let g:unite_source_file_mru_limit      = 100
let g:neomru#time_format               = "[%m-%d %H:%M] "
let g:unite_source_rec_max_cache_files = 5000
" reenable ag to ignore files defined in .gitignore, if unwanted files still
" shows up, refresh unite cache in with <C-l> in any unite window
let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']

nnoremap <leader><space> :<C-u>Unite -quick-match buffer<cr>
" It has issues to ignore files defined in .gitignore
" nnoremap <leader>f       :<C-u>Unite -buffer-name=files   -start-insert -no-split file_rec/async<cr>
nnoremap <leader>f       :<C-u>Unite -buffer-name=files buffer file_mru file_rec/git:--cached:--others:--exclude-standard<cr>
nnoremap <leader>/       :<C-u>Unite -buffer-name=code -auto-preview grep:.<cr>
nnoremap <leader>o       :<C-u>Unite -buffer-name=outline outline<cr>
nnoremap <F4>            :<C-u>Unite -buffer-name=outline outline<cr>
nnoremap <leader>l       :<C-u>Unite<cr>
" nnoremap <leader>r       :<C-u>Unite -buffer-name=file_mru -start-insert -no-split file_mru<cr>
"nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
"nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
"nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
autocmd FileType unite call s:unite_settings()
"# Q: I want the strength of the match to overpower the order in which I list sources.
autocmd FileType unite call unite#custom#profile('files', 'filters', 'sorter_rank')
autocmd FileType unite call unite#custom#profile('default','context',{
            \   'start_insert': 1,
            \   'winheight': 15,
            \   'direction': 'botright',
            \   })

function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction
" }}}

"-------------------------------------------------------------------------------
"                                  file types                                  "
"-------------------------------------------------------------------------------
Plug 'othree/html5.vim'

Plug 'tpope/vim-haml'

Plug 'chase/vim-ansible-yaml'

Plug 'openssl.vim'

"===================Plug loading ends==========================================
call plug#end()

" call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#matcher_default#use(['matcher_regexp', 'matcher_hide_current_file'])
call unite#filters#sorter_default#use(['sorter_rank'])
" call unite#filters#sorter_default#use(['sorter_length'])

"if has 256 colour, use a 256 colour theme
if $TERM =~ '^\(xterm\|screen\)' || $TERM =~ '256color$' || has("gui_running")
    if !has("gui_running")
        set t_Co=256
    endif
    "colorscheme inkpot
    "colorscheme leo
    colorscheme molokai
else
    colorscheme tango
endif
