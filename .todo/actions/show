#!/usr/bin/env ruby
# coding: utf-8
#Author: Roy L Zuo (roylzuo at gmail dot com)
#Description: 

require 'yaml'

def usage
    puts "   show "
    puts "     shows todo list and calendar entries according to patterns defined."
end

class Tasks
    attr_accessor :tasks

    def self.from_string(string)
        tasks = []

        lno = 0
        string.each_line do |l|
            l.strip!
            next    if l.empty?
            lno += 1
            pri = 0.0
            @@pat_rules.each {|r| pri += r['point']  if l =~ r['pattern'] and r.key? 'point' }
            tasks << [ lno, pri, l]
        end
        tasks
    end

    def self.read_rules(rules_file=File.join(ENV['TODO_ACTIONS_DIR'],'show_config.yml'))
        pri_rules = []
        pat_rules = []

        rules = YAML.load_file rules_file

        rules['priorities'].each do |r| 
            r[0] = eval r[0]
        end

        rules['patterns'].each do |r| 
            r['pattern'] = eval r['pattern']
            if r['display']
                if r['display'] =~ /^proc/
                    r['display'] = eval(r['display'])
                else
                    color = r['display']
                    r['display'] = proc {|match| "\e[#{color}m#{match}\e[m" }
                end
            end
        end

        [ rules['priorities'], rules['patterns'] ]
    end

    def self.from_a(a)
        new = Tasks.new
        new.tasks = a
        new
    end

    @@pri_rules, @@pat_rules = read_rules

    def read_all
        @tasks = Tasks.from_string(open(ENV['TODO_FILE']).read)
        self << Tasks.from_string(`rem |grep -E '^(T|D|G): '`)  if File.file?('/usr/bin/rem')
        sort!
        @tasks
    end

    def sort!
        @tasks.sort!{|x,y| 
            projx = x[2].scan(/(?: (\+\w+)|^(\+\w+))/).join
            projy = y[2].scan(/(?: (\+\w+)|^(\+\w+))/).join
            # priority desc, project, line number asc
            [y[1],projx, x[0]] <=> [x[1],projy,y[0]]
        }
    end

    def grep(exp)
        a = @tasks.select{|lno, pri, l| l =~ /#{exp}/i }
        Tasks.from_a(a)
    end

    def <<( list )
        @tasks += list.collect{|lno, pri, l| [lno + @tasks.size, pri, l]}
        clean
    end

    def clean
        todo_compeleted = @tasks.collect{|x| x[2] }
        today = Time.now.strftime("%Y-%m-%d")
        done_file = File.join(ENV['TODO_DIR'], 'done.txt')
        @tasks.delete_if do |lno, pri, l|
            next    if l =~ /^x /
            in_todo = todo_compeleted.include?("x #{today} #{l}")
            in_done = (`grep "#{today} #{l}" #{done_file}|wc -l`.strip == '1')
            in_done or in_todo
        end
    end

    def show
        reset = "\e[m"
        @tasks.each do |lno, pri, task|
            pri_c = "\e[m"
            @@pri_rules.each{|r, c| 
                if r.call(pri)
                    pri_c = "\e[#{c}m"; break
                end
            }
            # rules: 
            #   'display'   for display
            #   'points'    priority offset
            #   'pattern'   for matching
            @@pat_rules.each{|r|
                task.gsub!(r['pattern']){|match| 
                    if $1
                        mid = $1
                        pre, post = match.split mid
                        "#{pre}#{reset}#{r['display'].call(mid)}#{pri_c}#{post}"
                    else
                        "#{reset}#{r['display'].call(match)}#{pri_c}"
                    end
                }   if r['display']
            }
            puts "\e[36m%3d\e[m  #{pri_c}#{task}#{reset}" %lno
        end
    end
end

def relative_date(date)
    date = Date.parse(date, true) unless /Date.*/ =~ date.class.to_s
    days = (date - Date.today).to_i

    return 'today'     if days >= 0 and days < 1
    return 'tomorrow'  if days >= 1 and days < 2
    return 'yesterday' if days >= -1 and days < 0

    return "in #{days} days"      if days.abs < 60 and days > 0
    return "#{days.abs} days ago" if days.abs < 60 and days < 0

    return date.strftime('%A, %B %e') if days.abs < 182
    return date.strftime('%A, %B %e, %Y')
end

if __FILE__==$0
    ARGV.shift  if ARGV.first == File.basename( $0 )

    if ARGV.first == "usage"
        usage
    else
        tasks = Tasks.new
        tasks.read_all
        tasks = tasks.grep(ARGV.join(" "))  unless ARGV.empty?
        tasks.show
    end
end
